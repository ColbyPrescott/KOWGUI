Node types:
- Toggleable
  - If supplied an id or something, toggles could store their state on SD card
- Image
  - Must create or take image buffer for faster drawing
- Video / animation
  - Frame is decided by timer
    - How would that affect disabling the node?
      - If time between timer is much larger than a frame, update the timer as though the video was paused
- Polygon
  - Rotation
  - Scaling
  - Gradients
- Clip
  - vex::brain::lcd::setClipRegion to mask all children inside node's area
  - Some possibilities may not work from the parenting system... Maybe make a node that will copy the position of another?
    Keep things simple, user may write location copying code into BaseNode::SetTick
  - How might each interactable react to being clipped?
    - Clip should stop interactable from being selected
    - Clip border should unfocus clickable
    - Clip border should not stop draggable from moving (for scrollable windows)
- Timer system? For like, regularly spawning nodes with particle code?
- Alignment
  - Automatically position one of its own edges to an edge of the parent node


Prefabs:
- Functions to prebuild useful systems
- Every node will have shallowID and... maybe class? For customizability
    - Or just a FindShallowIDs function
- Functions or classes? 
    - What if, classes are prefabs and functions are referred to as like... macros?
    - Functions are simple one time node systems. Create me a button
    - Classes are more complicated and can contain methods. Made me a graph and then update the data inside
    - Or, most recent shower thought, everything is functions but more complicated systems can be shoved into a namespace with extra functions that take a node pointer as parameter
- Keyboard
    - Keyboard is fine as is. Numpad code may break if multiple open at the same time
- Graph
- Slider / interactable or like volume gauge
- Drop down
- Color picker


Features:
- Disablement
  - SetEnable and SetDisable callback functions?
- ID system
  - Classes maybe? Add a function to return a list of all elements with a specific class added?
- Removing nodes
  - Delete keyword
  - Recursively call delete on children
  - Remove ID
- Interactable
  - Recheck select, manual select
- Error system
  - Show in console?
  - Show on screen?
  - Supress warnings?
  - Substitute? Returning nullptr from FindID will likely result in a program crash. Fatal if on field. Fabricate a new node to return and hope it stops the crash
- Animation
  - Currently possible by constantly updating a value manually, but should specific functionality be added?
  - Bezier curve animation?
  - Animation states like Unity?
  - Whatever CSS does like CSS?
  - Should be able to attatch an animation to events like node getting enabled. Should user 
      set this with some sort of node->SetEnable([](){node->Animate();}) thing?
- Controller input
  - Integration with WIP KOWGUIController? KOWGUI shouldn't force user into using other KOW libraries
  - Cursor
    - Full joystick like MTV3GUI
    - Joystick or buttons could control velocity
    - Set which joystick / buttons are being used
  - Menu
    - Put a scrollable menu on controller screen while enabled
    - Do so when a special type of node is enabled?



Refactoring and other code stuff:
- Some comments have the text "TO DO" so they can be found with 
  - Linux / Mac: grep -r "TO DO"
  - Windows: findstr /S "TO DO" *.cpp *.h
- Move all cpp files into the headers so a user will only need to copy the include folder
  - On second look at PROS, it seems like precompiled binaries could be a viable option
- Use of 'p' before pointer names in inconsistent
- Should positions be represented by floats and rounded in the screen functions? Increasing a node's 
  position at a constant rate could have much more precision a lot easier
- Usage of clipping region will need to have a system like JS canvas transform save restore
- If you want to display a percent, you need to type four out due to the filtering of snprintf and lcd::print
- FindID template to make casting more compact
- gui[ID] mimicks FindID
- Setting position of line first vertex while adding the node as a child will incorrectly update the width and 
  height representing the second vertex because calculating size depends on the parent being already fully initialized
- Redo header guard names with folder structure. KOWGUI_NODES_BASIC_GROUP_H



Other:
- Figure out what email to use when posting to GitHub and figure 
  out how to update it across all commits
- Icon of a melting cow lol. Knock On Wood Graphical User Interface. KOWGUI. Gooey cow. :D
- Um, trailer maybe?? Some sort of cool GitHub page. A brand new GUI library without PROS. 
  Some people might be like me and dislike the idea of PROS forcing itself into every part
  of code without choice. If I want KOWGUI to stop drawing on the screen, KOWGUI::Stop().
  PROS says it ports LVGL which itself has an amazing looking webpage, but then I look for examples 
  of it being used on the V5 brain and nothing stands out as entirely mind blowing...
  And no hate on PROS or anything. I just don't see what useful things it can do that VEX C++ can't :/
- Panels, like the slides in MTV3GUI, should be implemented by the user. FMI, git checkout 3356326ce248446c97b50c49b8326b6143ee4463



Random notes:
- Users will have to replace the -fno-rtti compiler flag with -frtti on line 95 of vex/mkenv.mk
  VEX may have disabled dynamic_cast for a reason, but, I need it. This project will be sooo much messier without it
- Users will have to add an extra depth to the source code depth in makefile